// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  transactions  Transaction[]
  budgets       Budget[]
  categories    Category[]
  refreshTokens RefreshToken[]
  chatHistory   AIChatHistory[]
  accounts      Account[]
  goals         Goal[]
  settings      UserSettings?
  security      UserSecurity?
}

model RefreshToken {
  id        String   @id @default(uuid()) @map("_id")
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Transaction {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  amount           Float
  type             String             // 'income' or 'expense'
  description      String
  date             DateTime           @default(now())
  categoryId       String?            @db.ObjectId
  category         Category?          @relation(fields: [categoryId], references: [id])
  userId           String             @db.ObjectId
  user             User               @relation(fields: [userId], references: [id])
  accountId        String?            @db.ObjectId
  account          Account?           @relation("AccountTransactions", fields: [accountId], references: [id])
  goalContribution GoalContribution?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([userId])
  @@index([categoryId])
  @@index([accountId])
  @@index([date])
}

model Category {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  icon          String?
  color         String?
  type          String       // 'income' or 'expense'
  userId        String?      @db.ObjectId
  user          User?        @relation(fields: [userId], references: [id])
  transactions  Transaction[]
  budgets       Budget[]
  parentId      String?      @db.ObjectId
  parent        Category?    @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children      Category[]   @relation("CategoryToCategory")
  isSystem      Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([name, userId])
  @@index([userId])
  @@index([parentId])
}

model Budget {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  month       Int
  year        Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, categoryId, month, year])
  @@index([userId])
  @@index([categoryId])
}

model AIChatHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  role      String   // 'user' or 'assistant'
  content   String
  timestamp DateTime @default(now())

  @@index([userId])
  @@index([timestamp])
}

model Account {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userId       String        @db.ObjectId
  user         User          @relation(fields: [userId], references: [id])
  name         String
  type         String        // 'checking', 'savings', 'credit', 'investment'
  institution  String?
  balance      Float         @default(0)
  currency     String        @default("COP")
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[] @relation("AccountTransactions")

  @@index([userId])
}

model UserSettings {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  currency        String   @default("COP")
  timezone        String   @default("America/Bogota")
  language        String   @default("es")
  dateFormat      String   @default("DD/MM/YYYY")
  notifications   Json     @default("{\"email\": true, \"push\": true, \"budgetAlerts\": true, \"goalReminders\": true}")
  theme           String   @default("system") // 'light', 'dark', 'system'
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserSecurity {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @unique @db.ObjectId
  user              User      @relation(fields: [userId], references: [id])
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?
  backupCodes       String[]
  loginAttempts     Int       @default(0)
  lockedUntil       DateTime?
  lastLoginAt       DateTime?
  passwordChangedAt DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Goal {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  userId        String             @db.ObjectId
  user          User               @relation(fields: [userId], references: [id])
  name          String
  description   String?
  targetAmount  Float
  currentAmount Float              @default(0)
  targetDate    DateTime?
  category      String?            // 'savings', 'vacation', 'emergency', 'investment', 'other'
  status        String             @default("active") // 'active', 'completed', 'paused', 'cancelled'
  priority      String             @default("medium") // 'high', 'medium', 'low'
  isPublic      Boolean            @default(false)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  contributions GoalContribution[]

  @@index([userId])
  @@index([status])
}

model GoalContribution {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  goalId        String       @db.ObjectId
  goal          Goal         @relation(fields: [goalId], references: [id])
  amount        Float
  date          DateTime     @default(now())
  description   String?
  transactionId String?      @unique @db.ObjectId
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  createdAt     DateTime     @default(now())

  @@index([goalId])
  @@index([date])
}
